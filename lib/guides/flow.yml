PATH --- リクエストされたパス
MODULE --- リクエストに対応するモジュール
MODULEを含むファイルは存在しなければ読み込まれない
functions.php:
  WPAILSの読み込み
  lib/main.php:
    lib/file_path.php:
      \file_pathの定義
      ファイルのパスを取得しやすいようにした関数
    vendor/autoload.php: composerで入れたライブラリ
    config/app.php:
      アプリの設定
      config/routes.php: ルーティングの設定
    lib/logger.php:
      \Monolog\LoggerクラスをラップしたLoggerクラス
      Loggerのクラスメソッドとしてログを記録する
    lib/validate_config.php:
      configに正しい値がセットされていなかったらエラー
    lib/hooks.php:
      WPAILSデフォルトのアクションフックなど
    lib/support.php: PHPの組み込み関数に準じたオリジナル関数を追加
    lib/interface.php:
      configにアクセスしやすくする関数の定義
    lib/module.php:
      \Wpails\Moduleオブジェクト
      WPAILSのモジュール
    lib/route.php:
      \Wpails\Routeオブジェクト
      ルーティングの設定を解析して情報を格納するオブジェクト
    lib/filter.php:
      \Wpails\Filterオブジェクト
      ルーティングにおけるフィルターのオブジェクト
    lib/router.php: ルーティングの設定を読み込んでリクエストを処理するオブジェクト
    開発環境ならWP_SCSS_ALWAYS_RECOMPILE = true
    helpers/preload/*.php:
      helpers/preload/url.php: クエリを連想配列で渡せばURLに変換してくれるURLオブジェクト
    config/action_hooks.php: add_actionを設定する
index.php:
  prepare.php:
    \Wpails\Router::init();
    \Wpails\Router::render_404_if_route_doesnt_exist();
      ルーティングの設定を読み込んで
      IF リクエストされたパスが存在しなかったら
        404ページを表示
        EXIT
      ENDIF
    \Wpails\Router::redirect_if_current_route_has_redirect();
      IF 受け付けたルーティングにリダイレクトの値があったら
        リダイレクト
        EXIT
      ENDIF
    \Wpails\Router::render_404_if_not_permitted();
      IF 受け付けたルーティングにフィルターが指定してあって
      AND Filterオブジェクトがログインしているユーザーの許可権を許可していなかったら
        IF ログインしていたら
          404ページを表示
          EXIT
        ELSE
          ログインページへリダイレクト
          EXIT
        ENDIF
      ENDIF
    ここまできたらステータスを一度200に設定(後から404に変えることも可能)
    models/main.php: エントリポイント
      models/wp_records/base.php: Post, Userに共通する関数
      models/wp_records/post.php: 投稿をラップするPostオブジェクト
      models/wp_records/post_ancestors/*.php: Postクラスを継承したカスタム投稿をラップするオブジェクト
      models/wp_records/user.php: ユーザーをラップするUserオブジェクト
      models/wp_records/user_ancestors/*.php: Userクラスを継承したカスタムユーザーをラップするオブジェクト
      modles/utilities/*.php: DBには関係ないオブジェクト
    lib/request.php: リクエストの情報をラップした\Wpails\Request
    \Wpails\Request::init();
    $WPAILS_REQUEST = \Wpails\Request::now();
    リクエスト情報を表示
    $WPAILS_MODULE = $WPAILS_REQUEST->module->name;
    current_user()関数の定義
    読み込むファイル名を$files_to_loadに格納
    helpers/modules/MODULE.php:
      モジュール内でしか使わない再利用関数(controller, viewsに関係なく使える)
  controllers/_helpers.php:
    コントローラーで使う再利用関数・オブジェクト
      - filter_GET, filter_POST関数
      - Flashオブジェクト
  controllers/_before_action.php:
    全ページで先に行う処理
      - CSRF対策
  controllers/PATH.php:
    - filter_GET, filter_POSTでパラメータをフィルタリング
    - viewsで使う変数を定義
    - modelsに命令
    - 結果に応じてリダイレクト
  controllers/_after_action.php:
    全ページで後に行う処理
  IF リクエストしたrouteがtemplateなしであるかtemplateファイルが存在しない
    404ページを返す
    EXIT
  ENDIF
  views/_helpers.php:
    ビューファイルで使う再利用関数
      - stylesheet_tag CSSのlinkタグをファイル名から生成
      - javascript_tag scriptタグをファイル名から生成
      - form_trigger_tag どのリクエストなのかを伝えるtrigger項目のinput:hiddenを生成
      - form_id_tag データ更新フォームに必要なID属性を入れるinput:hiddenを生成
  views/MODULE/_helpers.php:
    ビューファイルで使う再利用関数(モジュール固有)
  <!DOCTYPE html>
  views/_layouts/_head.php: headタグはここに書く
    authenticity_tokenのmetaタグ
    app/assets/css/style.css: WPAILS共通のスタイル
    app/assets/css/MODULE.css: モジュール固有のスタイル
    views/MODULE/_layouts/_head.php: モジュール固有のheadタグ内
    Font AwesomeのCDN
    jqueryのCDN
    wp_head()
  <body>
  wp_body_open()
  views/_layouts/_header.php: WPAILSのヘッダー
  IF モジュールのindex.phpがあれば
    views/MODULE/index.php:
      モジュールのビューファイルのルート
  ELSE
    views/PATH.php: リクエストに応じたテンプレートファイル
  ENDIF
  app/assets/js/index.js:
    共通のJSファイル
      - フォーム送信時にCSRFを自動挿入
  app/assets/js/MODULE.js:
    モジュール固有のJSファイル
  controllers/_after_render.php:
    全ページでHTML出力後に行う処理
